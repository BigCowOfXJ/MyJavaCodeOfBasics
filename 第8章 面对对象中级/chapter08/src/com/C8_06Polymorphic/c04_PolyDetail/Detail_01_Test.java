package com.C8_06Polymorphic.c04_PolyDetail;

public class Detail_01_Test {

    public static void main(String[] args) {
        //这里是向上转型

        /*
        * 对于对象而言，其类型分为编译类型 和 运行类型
        * Animal dog = new Dog("jack",2); 就是向上转型
        * Animal 就是编译类型 ，而 Dog就是运行类型
        * 对象能访问的方法首先要满足修饰符的约定
        * 对象能访问的方法是看编译类型，而其最终形态由运行类型决定，也就是方法重写后的形态（没有重写就是原始形态）
        * 对象不能访问子类有而父类没有的方法
        * 属性没有重写的概念，对于向上转型，其访问的属性也是父类的，子类的所以属性都访问不到。
        * 当然在堆中的实际对象会把子类和父类的全部方法都加载
        * 只是受到上述限制，部分无法直接访问
        * 对与子类特有的方法要用向下转型
        * */

        Detail_01_Animal dog = new Detail_01_Dog("jack",2);
        dog.eat();
        dog.say();
        dog.walk();


        /*
        * 这是向下转型，需要注意的点是：
        * 向下转型只能强转父类的引用，不能强转父类的编译类型/对象
        * 强转的父类引用必须是指向当前类目标类型的对象（就是父类引用的运行类型要达到一致性）
        * 强转后的对象可以使用父类的可以访问的属性和对象，以及子类的特有方法和属性
        *
        * */
        Detail_01_Dog dog2 = (Detail_01_Dog) dog;
        dog2.action2();

    }
}
